// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "map_renderer.pb.h"
#include "transport_router.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_catalogue_proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DistanceBetweenStops;
struct DistanceBetweenStopsDefaultTypeInternal;
extern DistanceBetweenStopsDefaultTypeInternal _DistanceBetweenStops_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_proto::Bus* Arena::CreateMaybeMessage<::transport_catalogue_proto::Bus>(Arena*);
template<> ::transport_catalogue_proto::Coordinates* Arena::CreateMaybeMessage<::transport_catalogue_proto::Coordinates>(Arena*);
template<> ::transport_catalogue_proto::DistanceBetweenStops* Arena::CreateMaybeMessage<::transport_catalogue_proto::DistanceBetweenStops>(Arena*);
template<> ::transport_catalogue_proto::Stop* Arena::CreateMaybeMessage<::transport_catalogue_proto::Stop>(Arena*);
template<> ::transport_catalogue_proto::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_proto {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class DistanceBetweenStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.DistanceBetweenStops) */ {
 public:
  inline DistanceBetweenStops() : DistanceBetweenStops(nullptr) {}
  ~DistanceBetweenStops() override;
  explicit PROTOBUF_CONSTEXPR DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceBetweenStops(const DistanceBetweenStops& from);
  DistanceBetweenStops(DistanceBetweenStops&& from) noexcept
    : DistanceBetweenStops() {
    *this = ::std::move(from);
  }

  inline DistanceBetweenStops& operator=(const DistanceBetweenStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceBetweenStops& operator=(DistanceBetweenStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceBetweenStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceBetweenStops* internal_default_instance() {
    return reinterpret_cast<const DistanceBetweenStops*>(
               &_DistanceBetweenStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DistanceBetweenStops& a, DistanceBetweenStops& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceBetweenStops* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceBetweenStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceBetweenStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceBetweenStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceBetweenStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DistanceBetweenStops& from) {
    DistanceBetweenStops::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceBetweenStops* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.DistanceBetweenStops";
  }
  protected:
  explicit DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromStopFieldNumber = 1,
    kToStopFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // string from_stop = 1;
  void clear_from_stop();
  const std::string& from_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_stop();
  PROTOBUF_NODISCARD std::string* release_from_stop();
  void set_allocated_from_stop(std::string* from_stop);
  private:
  const std::string& _internal_from_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_stop(const std::string& value);
  std::string* _internal_mutable_from_stop();
  public:

  // string to_stop = 2;
  void clear_to_stop();
  const std::string& to_stop() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_to_stop(ArgT0&& arg0, ArgT... args);
  std::string* mutable_to_stop();
  PROTOBUF_NODISCARD std::string* release_to_stop();
  void set_allocated_to_stop(std::string* to_stop);
  private:
  const std::string& _internal_to_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_to_stop(const std::string& value);
  std::string* _internal_mutable_to_stop();
  public:

  // uint32 distance = 3;
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.DistanceBetweenStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_stop_;
    uint32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_proto.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::transport_catalogue_proto::Coordinates& coordinates() const;
  PROTOBUF_NODISCARD ::transport_catalogue_proto::Coordinates* release_coordinates();
  ::transport_catalogue_proto::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::transport_catalogue_proto::Coordinates* coordinates);
  private:
  const ::transport_catalogue_proto::Coordinates& _internal_coordinates() const;
  ::transport_catalogue_proto::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::transport_catalogue_proto::Coordinates* coordinates);
  ::transport_catalogue_proto::Coordinates* unsafe_arena_release_coordinates();

  // uint32 id = 3;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::transport_catalogue_proto::Coordinates* coordinates_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameStopsFieldNumber = 2,
    kNameFieldNumber = 1,
    kIsRingFieldNumber = 3,
  };
  // repeated string name_stops = 2;
  int name_stops_size() const;
  private:
  int _internal_name_stops_size() const;
  public:
  void clear_name_stops();
  const std::string& name_stops(int index) const;
  std::string* mutable_name_stops(int index);
  void set_name_stops(int index, const std::string& value);
  void set_name_stops(int index, std::string&& value);
  void set_name_stops(int index, const char* value);
  void set_name_stops(int index, const char* value, size_t size);
  std::string* add_name_stops();
  void add_name_stops(const std::string& value);
  void add_name_stops(std::string&& value);
  void add_name_stops(const char* value);
  void add_name_stops(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name_stops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name_stops();
  private:
  const std::string& _internal_name_stops(int index) const;
  std::string* _internal_add_name_stops();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_ring = 3;
  void clear_is_ring();
  bool is_ring() const;
  void set_is_ring(bool value);
  private:
  bool _internal_is_ring() const;
  void _internal_set_is_ring(bool value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_ring_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kRenderSettingsFieldNumber = 4,
    kRouterSettingsFieldNumber = 5,
  };
  // repeated .transport_catalogue_proto.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_proto::Stop& _internal_stops(int index) const;
  ::transport_catalogue_proto::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_proto::Stop& stops(int index) const;
  ::transport_catalogue_proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >&
      stops() const;

  // repeated .transport_catalogue_proto.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_catalogue_proto::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >*
      mutable_buses();
  private:
  const ::transport_catalogue_proto::Bus& _internal_buses(int index) const;
  ::transport_catalogue_proto::Bus* _internal_add_buses();
  public:
  const ::transport_catalogue_proto::Bus& buses(int index) const;
  ::transport_catalogue_proto::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >&
      buses() const;

  // repeated .transport_catalogue_proto.DistanceBetweenStops distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::transport_catalogue_proto::DistanceBetweenStops* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >*
      mutable_distances();
  private:
  const ::transport_catalogue_proto::DistanceBetweenStops& _internal_distances(int index) const;
  ::transport_catalogue_proto::DistanceBetweenStops* _internal_add_distances();
  public:
  const ::transport_catalogue_proto::DistanceBetweenStops& distances(int index) const;
  ::transport_catalogue_proto::DistanceBetweenStops* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >&
      distances() const;

  // .map_renderer_proto.MapVisualizationSettings render_settings = 4;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::map_renderer_proto::MapVisualizationSettings& render_settings() const;
  PROTOBUF_NODISCARD ::map_renderer_proto::MapVisualizationSettings* release_render_settings();
  ::map_renderer_proto::MapVisualizationSettings* mutable_render_settings();
  void set_allocated_render_settings(::map_renderer_proto::MapVisualizationSettings* render_settings);
  private:
  const ::map_renderer_proto::MapVisualizationSettings& _internal_render_settings() const;
  ::map_renderer_proto::MapVisualizationSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::map_renderer_proto::MapVisualizationSettings* render_settings);
  ::map_renderer_proto::MapVisualizationSettings* unsafe_arena_release_render_settings();

  // .transport_router_proto.RouterSettings router_settings = 5;
  bool has_router_settings() const;
  private:
  bool _internal_has_router_settings() const;
  public:
  void clear_router_settings();
  const ::transport_router_proto::RouterSettings& router_settings() const;
  PROTOBUF_NODISCARD ::transport_router_proto::RouterSettings* release_router_settings();
  ::transport_router_proto::RouterSettings* mutable_router_settings();
  void set_allocated_router_settings(::transport_router_proto::RouterSettings* router_settings);
  private:
  const ::transport_router_proto::RouterSettings& _internal_router_settings() const;
  ::transport_router_proto::RouterSettings* _internal_mutable_router_settings();
  public:
  void unsafe_arena_set_allocated_router_settings(
      ::transport_router_proto::RouterSettings* router_settings);
  ::transport_router_proto::RouterSettings* unsafe_arena_release_router_settings();

  // @@protoc_insertion_point(class_scope:transport_catalogue_proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops > distances_;
    ::map_renderer_proto::MapVisualizationSettings* render_settings_;
    ::transport_router_proto::RouterSettings* router_settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double latitude = 1;
inline void Coordinates::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Coordinates::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Coordinates.latitude)
  return _internal_latitude();
}
inline void Coordinates::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Coordinates::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Coordinates.latitude)
}

// double longitude = 2;
inline void Coordinates::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Coordinates::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Coordinates.longitude)
  return _internal_longitude();
}
inline void Coordinates::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Coordinates::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Coordinates.longitude)
}

// -------------------------------------------------------------------

// DistanceBetweenStops

// string from_stop = 1;
inline void DistanceBetweenStops::clear_from_stop() {
  _impl_.from_stop_.ClearToEmpty();
}
inline const std::string& DistanceBetweenStops::from_stop() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DistanceBetweenStops.from_stop)
  return _internal_from_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistanceBetweenStops::set_from_stop(ArgT0&& arg0, ArgT... args) {
 
 _impl_.from_stop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.DistanceBetweenStops.from_stop)
}
inline std::string* DistanceBetweenStops::mutable_from_stop() {
  std::string* _s = _internal_mutable_from_stop();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.DistanceBetweenStops.from_stop)
  return _s;
}
inline const std::string& DistanceBetweenStops::_internal_from_stop() const {
  return _impl_.from_stop_.Get();
}
inline void DistanceBetweenStops::_internal_set_from_stop(const std::string& value) {
  
  _impl_.from_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::_internal_mutable_from_stop() {
  
  return _impl_.from_stop_.Mutable(GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::release_from_stop() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.DistanceBetweenStops.from_stop)
  return _impl_.from_stop_.Release();
}
inline void DistanceBetweenStops::set_allocated_from_stop(std::string* from_stop) {
  if (from_stop != nullptr) {
    
  } else {
    
  }
  _impl_.from_stop_.SetAllocated(from_stop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.from_stop_.IsDefault()) {
    _impl_.from_stop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.DistanceBetweenStops.from_stop)
}

// string to_stop = 2;
inline void DistanceBetweenStops::clear_to_stop() {
  _impl_.to_stop_.ClearToEmpty();
}
inline const std::string& DistanceBetweenStops::to_stop() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DistanceBetweenStops.to_stop)
  return _internal_to_stop();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistanceBetweenStops::set_to_stop(ArgT0&& arg0, ArgT... args) {
 
 _impl_.to_stop_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.DistanceBetweenStops.to_stop)
}
inline std::string* DistanceBetweenStops::mutable_to_stop() {
  std::string* _s = _internal_mutable_to_stop();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.DistanceBetweenStops.to_stop)
  return _s;
}
inline const std::string& DistanceBetweenStops::_internal_to_stop() const {
  return _impl_.to_stop_.Get();
}
inline void DistanceBetweenStops::_internal_set_to_stop(const std::string& value) {
  
  _impl_.to_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::_internal_mutable_to_stop() {
  
  return _impl_.to_stop_.Mutable(GetArenaForAllocation());
}
inline std::string* DistanceBetweenStops::release_to_stop() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.DistanceBetweenStops.to_stop)
  return _impl_.to_stop_.Release();
}
inline void DistanceBetweenStops::set_allocated_to_stop(std::string* to_stop) {
  if (to_stop != nullptr) {
    
  } else {
    
  }
  _impl_.to_stop_.SetAllocated(to_stop, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.to_stop_.IsDefault()) {
    _impl_.to_stop_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.DistanceBetweenStops.to_stop)
}

// uint32 distance = 3;
inline void DistanceBetweenStops::clear_distance() {
  _impl_.distance_ = 0u;
}
inline uint32_t DistanceBetweenStops::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t DistanceBetweenStops::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.DistanceBetweenStops.distance)
  return _internal_distance();
}
inline void DistanceBetweenStops::_internal_set_distance(uint32_t value) {
  
  _impl_.distance_ = value;
}
inline void DistanceBetweenStops::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.DistanceBetweenStops.distance)
}

// -------------------------------------------------------------------

// Stop

// string name = 1;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Stop.name)
}

// .transport_catalogue_proto.Coordinates coordinates = 2;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && _impl_.coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArenaForAllocation() == nullptr && _impl_.coordinates_ != nullptr) {
    delete _impl_.coordinates_;
  }
  _impl_.coordinates_ = nullptr;
}
inline const ::transport_catalogue_proto::Coordinates& Stop::_internal_coordinates() const {
  const ::transport_catalogue_proto::Coordinates* p = _impl_.coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_proto::Coordinates&>(
      ::transport_catalogue_proto::_Coordinates_default_instance_);
}
inline const ::transport_catalogue_proto::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::transport_catalogue_proto::Coordinates* coordinates) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coordinates_);
  }
  _impl_.coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.Stop.coordinates)
}
inline ::transport_catalogue_proto::Coordinates* Stop::release_coordinates() {
  
  ::transport_catalogue_proto::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_proto::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Stop.coordinates)
  
  ::transport_catalogue_proto::Coordinates* temp = _impl_.coordinates_;
  _impl_.coordinates_ = nullptr;
  return temp;
}
inline ::transport_catalogue_proto::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (_impl_.coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_proto::Coordinates>(GetArenaForAllocation());
    _impl_.coordinates_ = p;
  }
  return _impl_.coordinates_;
}
inline ::transport_catalogue_proto::Coordinates* Stop::mutable_coordinates() {
  ::transport_catalogue_proto::Coordinates* _msg = _internal_mutable_coordinates();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Stop.coordinates)
  return _msg;
}
inline void Stop::set_allocated_coordinates(::transport_catalogue_proto::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Stop.coordinates)
}

// uint32 id = 3;
inline void Stop::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Stop.id)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.Bus.name)
}

// repeated string name_stops = 2;
inline int Bus::_internal_name_stops_size() const {
  return _impl_.name_stops_.size();
}
inline int Bus::name_stops_size() const {
  return _internal_name_stops_size();
}
inline void Bus::clear_name_stops() {
  _impl_.name_stops_.Clear();
}
inline std::string* Bus::add_name_stops() {
  std::string* _s = _internal_add_name_stops();
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_proto.Bus.name_stops)
  return _s;
}
inline const std::string& Bus::_internal_name_stops(int index) const {
  return _impl_.name_stops_.Get(index);
}
inline const std::string& Bus::name_stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.name_stops)
  return _internal_name_stops(index);
}
inline std::string* Bus::mutable_name_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.Bus.name_stops)
  return _impl_.name_stops_.Mutable(index);
}
inline void Bus::set_name_stops(int index, const std::string& value) {
  _impl_.name_stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.name_stops)
}
inline void Bus::set_name_stops(int index, std::string&& value) {
  _impl_.name_stops_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.name_stops)
}
inline void Bus::set_name_stops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_stops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_proto.Bus.name_stops)
}
inline void Bus::set_name_stops(int index, const char* value, size_t size) {
  _impl_.name_stops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_proto.Bus.name_stops)
}
inline std::string* Bus::_internal_add_name_stops() {
  return _impl_.name_stops_.Add();
}
inline void Bus::add_name_stops(const std::string& value) {
  _impl_.name_stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.name_stops)
}
inline void Bus::add_name_stops(std::string&& value) {
  _impl_.name_stops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.Bus.name_stops)
}
inline void Bus::add_name_stops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_stops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_proto.Bus.name_stops)
}
inline void Bus::add_name_stops(const char* value, size_t size) {
  _impl_.name_stops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_proto.Bus.name_stops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::name_stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.Bus.name_stops)
  return _impl_.name_stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_name_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.Bus.name_stops)
  return &_impl_.name_stops_;
}

// bool is_ring = 3;
inline void Bus::clear_is_ring() {
  _impl_.is_ring_ = false;
}
inline bool Bus::_internal_is_ring() const {
  return _impl_.is_ring_;
}
inline bool Bus::is_ring() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.Bus.is_ring)
  return _internal_is_ring();
}
inline void Bus::_internal_set_is_ring(bool value) {
  
  _impl_.is_ring_ = value;
}
inline void Bus::set_is_ring(bool value) {
  _internal_set_is_ring(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_proto.Bus.is_ring)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .transport_catalogue_proto.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::transport_catalogue_proto::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::transport_catalogue_proto::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::transport_catalogue_proto::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_proto::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::transport_catalogue_proto::Stop* TransportCatalogue::add_stops() {
  ::transport_catalogue_proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .transport_catalogue_proto.Bus buses = 2;
inline int TransportCatalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::transport_catalogue_proto::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.buses)
  return &_impl_.buses_;
}
inline const ::transport_catalogue_proto::Bus& TransportCatalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::transport_catalogue_proto::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::transport_catalogue_proto::Bus* TransportCatalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::transport_catalogue_proto::Bus* TransportCatalogue::add_buses() {
  ::transport_catalogue_proto::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.buses)
  return _impl_.buses_;
}

// repeated .transport_catalogue_proto.DistanceBetweenStops distances = 3;
inline int TransportCatalogue::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  _impl_.distances_.Clear();
}
inline ::transport_catalogue_proto::DistanceBetweenStops* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.distances)
  return _impl_.distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_proto.TransportCatalogue.distances)
  return &_impl_.distances_;
}
inline const ::transport_catalogue_proto::DistanceBetweenStops& TransportCatalogue::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline const ::transport_catalogue_proto::DistanceBetweenStops& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::transport_catalogue_proto::DistanceBetweenStops* TransportCatalogue::_internal_add_distances() {
  return _impl_.distances_.Add();
}
inline ::transport_catalogue_proto::DistanceBetweenStops* TransportCatalogue::add_distances() {
  ::transport_catalogue_proto::DistanceBetweenStops* _add = _internal_add_distances();
  // @@protoc_insertion_point(field_add:transport_catalogue_proto.TransportCatalogue.distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_proto::DistanceBetweenStops >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_proto.TransportCatalogue.distances)
  return _impl_.distances_;
}

// .map_renderer_proto.MapVisualizationSettings render_settings = 4;
inline bool TransportCatalogue::_internal_has_render_settings() const {
  return this != internal_default_instance() && _impl_.render_settings_ != nullptr;
}
inline bool TransportCatalogue::has_render_settings() const {
  return _internal_has_render_settings();
}
inline const ::map_renderer_proto::MapVisualizationSettings& TransportCatalogue::_internal_render_settings() const {
  const ::map_renderer_proto::MapVisualizationSettings* p = _impl_.render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::map_renderer_proto::MapVisualizationSettings&>(
      ::map_renderer_proto::_MapVisualizationSettings_default_instance_);
}
inline const ::map_renderer_proto::MapVisualizationSettings& TransportCatalogue::render_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.render_settings)
  return _internal_render_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_settings(
    ::map_renderer_proto::MapVisualizationSettings* render_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  _impl_.render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.render_settings)
}
inline ::map_renderer_proto::MapVisualizationSettings* TransportCatalogue::release_render_settings() {
  
  ::map_renderer_proto::MapVisualizationSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::map_renderer_proto::MapVisualizationSettings* TransportCatalogue::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.render_settings)
  
  ::map_renderer_proto::MapVisualizationSettings* temp = _impl_.render_settings_;
  _impl_.render_settings_ = nullptr;
  return temp;
}
inline ::map_renderer_proto::MapVisualizationSettings* TransportCatalogue::_internal_mutable_render_settings() {
  
  if (_impl_.render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::map_renderer_proto::MapVisualizationSettings>(GetArenaForAllocation());
    _impl_.render_settings_ = p;
  }
  return _impl_.render_settings_;
}
inline ::map_renderer_proto::MapVisualizationSettings* TransportCatalogue::mutable_render_settings() {
  ::map_renderer_proto::MapVisualizationSettings* _msg = _internal_mutable_render_settings();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.render_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_settings(::map_renderer_proto::MapVisualizationSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_settings_);
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings));
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.render_settings)
}

// .transport_router_proto.RouterSettings router_settings = 5;
inline bool TransportCatalogue::_internal_has_router_settings() const {
  return this != internal_default_instance() && _impl_.router_settings_ != nullptr;
}
inline bool TransportCatalogue::has_router_settings() const {
  return _internal_has_router_settings();
}
inline const ::transport_router_proto::RouterSettings& TransportCatalogue::_internal_router_settings() const {
  const ::transport_router_proto::RouterSettings* p = _impl_.router_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_router_proto::RouterSettings&>(
      ::transport_router_proto::_RouterSettings_default_instance_);
}
inline const ::transport_router_proto::RouterSettings& TransportCatalogue::router_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_proto.TransportCatalogue.router_settings)
  return _internal_router_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router_settings(
    ::transport_router_proto::RouterSettings* router_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_settings_);
  }
  _impl_.router_settings_ = router_settings;
  if (router_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_proto.TransportCatalogue.router_settings)
}
inline ::transport_router_proto::RouterSettings* TransportCatalogue::release_router_settings() {
  
  ::transport_router_proto::RouterSettings* temp = _impl_.router_settings_;
  _impl_.router_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_router_proto::RouterSettings* TransportCatalogue::unsafe_arena_release_router_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_proto.TransportCatalogue.router_settings)
  
  ::transport_router_proto::RouterSettings* temp = _impl_.router_settings_;
  _impl_.router_settings_ = nullptr;
  return temp;
}
inline ::transport_router_proto::RouterSettings* TransportCatalogue::_internal_mutable_router_settings() {
  
  if (_impl_.router_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_router_proto::RouterSettings>(GetArenaForAllocation());
    _impl_.router_settings_ = p;
  }
  return _impl_.router_settings_;
}
inline ::transport_router_proto::RouterSettings* TransportCatalogue::mutable_router_settings() {
  ::transport_router_proto::RouterSettings* _msg = _internal_mutable_router_settings();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_proto.TransportCatalogue.router_settings)
  return _msg;
}
inline void TransportCatalogue::set_allocated_router_settings(::transport_router_proto::RouterSettings* router_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_settings_);
  }
  if (router_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_settings));
    if (message_arena != submessage_arena) {
      router_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_settings_ = router_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_proto.TransportCatalogue.router_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
